<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.deataworld.adminMapper">

	<!-- 회원 기본정보 조회 -->
	<select id="getUserInfo" parameterType="java.util.Map" resultType="MemberDTO">
		select * from member
		<if test="m_number != null">
			where m_number = #{m_number}
		</if>
		<if test="m_id != null">
			where m_id = #{m_id}
		</if>
	</select>
	
	<!-- 회원 포인트정보 조회 -->
	
	<!-- 전체 구직자 수 -->
	<select id="employeeCnt" resultType="java.lang.Integer">
		select count(*) from member
		where m_type = 1
	</select>
	
	<!-- 구직자 회원 조회(페이징 처리) -->
	<select id="employeeList" resultType="java.util.Map">
		select
			m_id,	<!-- ID -->
			m_nick,	<!-- 닉네임 -->
			date(m_regdate) as m_regdate, <!-- 가입일 -->
			m_warned,	<!-- 경고상태 -->
			m_number	<!-- 회원 번호(상세정보) -->
		from member
		where m_type = 1
		order by m_number desc
		limit #{pageStart}, #{pagePerList}
	</select>
	
	<!-- 전체 구인자 수 -->
	<select id="employerCnt" resultType="java.lang.Integer">
		select count(*) from member
		where m_type = 2
	</select>
	
	<!-- 구인자 회원 조회(페이징 처리) -->
	<select id="employerList" resultType="java.util.Map">
		select
			m_id,	<!-- ID -->
			m_nick,	<!-- 닉네임 -->
			date(m_regdate) as m_regdate, <!-- 가입일 -->
			m_warned,	<!-- 경고상태 -->
			m_number	<!-- 회원 번호(상세정보) -->
		from member
		where m_type = 2
		order by m_number desc
		limit #{pageStart}, #{pagePerList}
	</select>
	
	<!-- 전체 블랙리스트 수 -->
	<select id="blacklistCnt" resultType="java.lang.Integer">
		select count(*) from member
		where m_banned = 1
	</select>
	
	<!-- 블랙리스트 조회(페이징 처리) -->
	<select id="blacklist" resultType="java.util.Map">
		select 
			m.m_id,		<!-- m.회원 ID -->
			m.m_nick,	<!-- m.회원 닉네임 -->
			date(m.m_regdate) as m_regdate,	<!-- m.회원 가입날짜 -->
			group_concat(rc.r_type) as r_types, <!-- rc.신고사유 -->
			group_concat(ur.b_number) as b_numbers, <!-- ur.해당 글번호 -->
			group_concat(ur.a_number) as a_numbers, <!-- ur.해당 공고번호 -->
			group_concat(ur.c_number) as c_numbers, <!-- ur.해당 댓글번호 -->
			group_concat(ur.r_type) as r_kind_types, <!-- ur.해당 신고종류 타입 -->
			m.m_number,	<!-- m.회원 번호 -->
			m.m_type	<!-- m.회원 구분 -->
		from member as m	<!-- 회원 테이블m -->
		inner join
		(
			(select m_id, b_number, a_number, -1 as c_number, r_type, r_code 
			from report
	        where del = 2)
		union
	        (select cr.m_id, ( <!-- 댓글번호에 해당하는 글 번호를 가져오기 위한 서브쿼리 -->
				select A.b_number from comments as A
				inner join comments_report as B
					on A.c_number = B.c_number
				where A.c_number = cr.c_number
				), -1, cr.c_number, cr.r_type, cr.r_code
			from comments_report as cr
			where del = 2)
		) as ur		<!-- 글신고, 댓글신고 테이블을 합친 union 테이블ur -->
			on m.m_id = ur.m_id
		inner join report_code as rc <!-- 신고 코드 테이블rc -->
			on ur.r_code = rc.r_code
		where
			m.m_banned = 1
		group by m.m_id
		order by m.m_number desc
		limit #{pageStart}, #{pagePerList}
	</select>
	
	<!-- 전체 구인공고 신고 수 -->
	<select id="jobAdsCnt" resultType="java.lang.Integer">
		select count(*) from report
		where
			r_type = 5
			and del = 0
	</select>
	
	<!-- 구인공고 신고 조회(페이징 처리) -->
	<select id="jobAds" resultType="java.util.Map">
		select
			B.s_name,	<!-- B.가게명 -->
			B.s_number,	<!-- B.가게 번호 -->
			A.m_id,		<!-- A.작성자 -->
			date(B.s_date) as s_date,	<!-- B.작성일 -->
			D.r_type,	<!-- D.신고 타입 -->
			A.a_number,	<!-- A.공고 번호 -->
			C.re_number,<!-- C.공고 신고 번호 -->
			C.r_date	<!-- C.신고 날짜 -->
		from job_ads as A <!-- 구인공고 테이블A -->
		inner join shop_info as B <!-- 가게정보 테이블B -->
			on A.s_number = B.s_number
		inner join report as C <!-- 글 신고 테이블C -->
			on A.a_number = C.a_number
		inner join report_code as D <!-- 신고 코드 테이블D -->
			on A.r_code = D.r_code
		where
			C.r_type = 5
			and C.del = 0
		order by C.r_date desc
		limit #{pageStart}, #{pagePerList}
	</select>
	
	<!-- 신고된 구인공고 삭제 -->
	<update id="warnJobAds" parameterType="java.lang.Integer">
		update job_ads as A, member as B, report as C
		set
			A.del = 1,
			B.m_warned = if(B.m_warned = 3, 3, B.m_warned + 1),
		    C.del = 2
		where
			A.a_number = #{a_number}
		    and A.m_id = B.m_id
		    and C.a_number = #{a_number}
	</update>
	
	<!-- 신고된 구인공고 취소 -->
	<update id="cancelJobAds" parameterType="java.lang.Integer">
		update job_ads as A, report as B
		set
			A.r_code = 0,
			B.del = 1
		where
			B.re_number = #{re_number}
		    and A.a_number = B.a_number
	</update>
	
	<!-- 전체 자유게시판 글 신고 수 -->
	<select id="freeBoardCnt" resultType="java.lang.Integer">
		select count(*) from report
		where
			r_type = 1
			and del = 0
	</select>
	
	<!-- 자유게시판 글 신고 조회(페이징 처리) -->
	<select id="freeBoard" resultType="java.util.Map">
		select
			A.b_title,	<!-- A.게시글 제목 -->
			A.m_id,		<!-- A.회원 ID(작성자) -->
			date(A.b_date) as b_date,	<!-- A.게시글 작성 날짜 -->
			C.r_type,	<!-- C.신고 타입 -->
			A.b_number,	<!-- A.게시글 번호 -->
			B.re_number,<!-- B.글 신고 번호 -->
			B.r_date	<!-- B.신고 날짜 -->
		from board as A <!-- 게시판 테이블A -->
		inner join report as B <!-- 글 신고 테이블B -->
			on A.b_number = B.b_number
		inner join report_code as C <!-- 신고 코드 테이블C -->
			on A.r_code = C.r_code
		where
			B.r_type = 1
			and B.del = 0
		order by B.r_date desc
		limit #{pageStart}, #{pagePerList}
	</select>
	
	<!-- 신고된 자유게시판 글 삭제 -->
	<update id="warnFreeBoard" parameterType="java.lang.Integer">
		update board as A, member as B, report as C
		set
			A.del = 1,
			B.m_warned = if(B.m_warned = 3, 3, B.m_warned + 1),
		    C.del = 2
		where
			A.b_number = #{b_number}
		    and A.m_id = B.m_id
		    and C.b_number = #{b_number}
	</update>
	
	<!-- 신고된 자유게시판 글 취소 -->
	<update id="cancelFreeBoard" parameterType="java.lang.Integer">
		update board as A, report as B
		set
			A.r_code = 0,
			B.del = 1
		where
			B.re_number = #{re_number}
		    and A.b_number = B.b_number
	</update>
	
	<!-- 전체 자유게시판 댓글 신고 수 -->
	<select id="freeCommentsCnt" resultType="java.lang.Integer">
		select count(*) from comments_report
		where
			r_type = 2
			and del = 0
	</select>
	
	<!-- 자유게시판 댓글 신고 조회(페이징 처리) -->
	<select id="freeComments" resultType="java.util.Map">
		select
			A.c_contents,	<!-- A.댓글 내용 -->
			A.m_id,		<!-- A.회원 ID(작성자) -->
			date(A.c_date) as c_date,	<!-- A.댓글 작성 날짜 -->
			C.r_type,	<!-- C.신고 타입 -->
			A.b_number,	<!-- A.게시글 번호 -->
			A.c_number,	<!-- A.댓글 번호 -->
			B.cr_number,<!-- B.댓글 신고 번호 -->
			B.r_date	<!-- B.신고 날짜 -->
		from comments as A <!-- 댓글 테이블A -->
		inner join comments_report as B <!-- 댓글 신고 테이블B -->
			on A.c_number = B.c_number
		inner join report_code as C <!-- 신고 코드 테이블C -->
			on A.r_code = C.r_code
		where
			B.r_type = 2
			and B.del = 0
		order by B.r_date desc
		limit #{pageStart}, #{pagePerList}
	</select>
	
	<!-- 신고된 자유게시판 댓글 삭제 -->
	<update id="warnFreeComments" parameterType="java.lang.Integer">
		update comments as A, member as B, comments_report as C
		set
			A.del = 1,
			B.m_warned = if(B.m_warned = 3, 3, B.m_warned + 1),
		    C.del = 2
		where
			A.c_number = #{c_number}
		    and A.m_id = B.m_id
		    and C.c_number = #{c_number}
	</update>
	
	<!-- 신고된 자유게시판 댓글 취소 -->
	<update id="cancelFreeComments" parameterType="java.lang.Integer">
		update comments as A, comments_report as B
		set
			A.r_code = 0,
			B.del = 1
		where
			B.cr_number = #{cr_number}
		    and A.c_number = B.c_number
	</update>
	
	<!-- 전체 땜빵게시판 글 신고 수 -->
	<select id="tempingBoardCnt" resultType="java.lang.Integer">
		select count(*) from report
		where
			r_type = 3
			and del = 0
	</select>
	
	<!-- 땜빵게시판 글 신고 조회(페이징 처리) -->
	<select id="tempingBoard" resultType="java.util.Map">
		select
			A.b_title,	<!-- A.게시글 제목 -->
			A.m_id,		<!-- A.회원 ID(작성자) -->
			date(A.b_date) as b_date,	<!-- A.게시글 작성 날짜 -->
			C.r_type,	<!-- C.신고 타입 -->
			A.b_number,	<!-- A.게시글 번호 -->
			B.re_number,<!-- B.글 신고 번호 -->
			B.r_date	<!-- B.신고 날짜 -->
		from board as A <!-- 게시판 테이블A -->
		inner join report as B <!-- 글 신고 테이블B -->
			on A.b_number = B.b_number
		inner join report_code as C <!-- 신고 코드 테이블C -->
			on A.r_code = C.r_code
		where
			B.r_type = 3
			and B.del = 0
		order by B.r_date desc
		limit #{pageStart}, #{pagePerList}
	</select>
	
	<!-- 신고된 땜빵게시판 글 삭제 -->
	<update id="warnTempingBoard" parameterType="java.lang.Integer">
		update board as A, member as B, report as C
		set
			A.del = 1,
			B.m_warned = if(B.m_warned = 3, 3, B.m_warned + 1),
		    C.del = 2
		where
			A.b_number = #{b_number}
		    and A.m_id = B.m_id
		    and C.b_number = #{b_number}
	</update>
	
	<!-- 신고된 땜빵게시판 글 취소 -->
	<update id="cancelTempingBoard" parameterType="java.lang.Integer">
		update board as A, report as B
		set
			A.r_code = 0,
			B.del = 1
		where
			B.re_number = #{re_number}
		    and A.b_number = B.b_number
	</update>
	
	<!-- 전체 땜빵게시판 댓글 신고 수 -->
	<select id="tempingCommentsCnt" resultType="java.lang.Integer">
		select count(*) from comments_report
		where
			r_type = 4
			and del = 0
	</select>
	
	<!-- 땜빵게시판 댓글 신고 조회(페이징 처리) -->
	<select id="tempingComments" resultType="java.util.Map">
		select
			A.c_contents,	<!-- A.댓글 내용 -->
			A.m_id,		<!-- A.회원 ID(작성자) -->
			date(A.c_date) as c_date,	<!-- A.댓글 작성 날짜 -->
			C.r_type,	<!-- C.신고 타입 -->
			A.b_number,	<!-- A.게시글 번호 -->
			A.c_number,	<!-- A.댓글 번호 -->
			B.cr_number,<!-- B.댓글 신고 번호 -->
			B.r_date	<!-- B.신고 날짜 -->
		from comments as A <!-- 댓글 테이블A -->
		inner join comments_report as B <!-- 댓글 신고 테이블B -->
			on A.c_number = B.c_number
		inner join report_code as C <!-- 신고 코드 테이블C -->
			on A.r_code = C.r_code
		where
			B.r_type = 4
			and B.del = 0
		order by B.r_date desc
		limit #{pageStart}, #{pagePerList}
	</select>
	
	<!-- 신고된 땜빵게시판 댓글 삭제 -->
	<update id="warnTempingComments" parameterType="java.lang.Integer">
		update comments as A, member as B, comments_report as C
		set
			A.del = 1,
			B.m_warned = if(B.m_warned = 3, 3, B.m_warned + 1),
		    C.del = 2
		where
			A.c_number = #{c_number}
		    and A.m_id = B.m_id
		    and C.c_number = #{c_number}
	</update>
	
	<!-- 신고된 땜빵게시판 댓글 취소 -->
	<update id="cancelTempingComments" parameterType="java.lang.Integer">
		update comments as A, comments_report as B
		set
			A.r_code = 0,
			B.del = 1
		where
			B.cr_number = #{cr_number}
		    and A.c_number = B.c_number
	</update>
	
	<!-- 글 신고 -->
		<!-- 게시판 글 신고 -->
		<update id="boardReport" parameterType="java.util.Map">
			update board
			set
				r_code = #{r_code}
			where
				b_number = #{b_number}
		</update>
		<!-- 구인공고 신고 -->
		<update id="adsReport" parameterType="java.util.Map">
			update job_ads
			set
				r_code = #{r_code}
			where
				a_number = #{a_number}
		</update>
		<!-- 글 신고 테이블에 추가 -->
		<insert id="insertReport" parameterType="java.util.Map">
			insert into report(
				b_number, a_number, m_id, r_id, r_type, r_code, r_date, del
			)values(
				#{b_number}, #{a_number}, #{m_id}, #{r_id}, #{r_type}, #{r_code}, now(), 0
			)
		</insert>
		<!-- 로그인 유저가 이미 신고한 글인지 확인 -->
		<select id="confirmReport" parameterType="java.util.Map" resultType="java.lang.Integer">
			select count(*) from report
			where b_number = #{b_number}
				and a_number = #{a_number}
				and r_id = #{r_id}
		</select>
	
	<!-- 댓글 신고 -->
		<!-- 게시판 댓글 신고 -->
		<update id="commentsReport" parameterType="java.util.Map">
			update comments
			set
				r_code = #{r_code}
			where
				c_number = #{c_number}
		</update>
		<!-- 댓글 신고 테이블에 추가 -->
		<insert id="insertCommentsReport" parameterType="java.util.Map">
			insert into comments_report(
				c_number, m_id, r_id, r_type, r_code, r_date, del
			)values(
				#{c_number}, #{m_id}, #{r_id}, #{r_type}, #{r_code}, now(), 0
			)
		</insert>
		<!-- 로그인 유저가 이미 신고한 댓글인지 확인 -->
		<select id="confirmCommentsReport" parameterType="java.util.Map" resultType="java.lang.Integer">
			select count(*) from comments_report
			where c_number = #{c_number}
				and r_id = #{r_id}
		</select>
	
	<!-- 정지할 회원인지 확인하고 업데이트 -->
	<update id="banUpdate" parameterType="java.lang.String">
		update member
		set
			m_banned = if(m_warned = 3, 1, 0)
		where
			m_id = #{m_id}
	</update>
	
</mapper>